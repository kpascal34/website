---
description: 
globs: 
---

# Your rule content
[code html .pdf](mdc:Fortis Secured Website/code html .pdf)
[Dependencies.pdf](mdc:Fortis Secured Website/Dependencies.pdf)
[Product Requirements Document - New Website.pdf](mdc:Fortis Secured Website/Product Requirements Document - New Website.pdf)
- You can @ files here
- You can use markdown but dont have to

Here's a **robust, mistake-proof set of rules** tailored to your project's needs, combining dependency management, deployment stability, and mobile-first best practices:

---

### **Project Setup Rules**
1. **Monorepo Structure**
```bash
my-project/
├── apps/
│   ├── frontend/   # Mobile-first React app
│   └── backend/    # Node.js/Express API
├── packages/       # Shared code (TS types, utils)
├── Dockerfile
├── docker-compose.yml
└── package.json
```
- *Why*: Isolate concerns while sharing common code

2. **Dependency Installation Protocol**
```bash
# Use PNPM for strict dependency resolution
npm install -g pnpm

# Install in this exact order
pnpm add -g turbo                   # Monorepo management
pnpm install --frozen-lockfile      # Prevent unexpected updates
pnpm dlx @yarnpkg/sdks vscode       # IDE consistency
```
- *Lock files*: Commit `pnpm-lock.yaml` and `.npmrc` with `auto-install-peers=true`

---

### **Dependency Management Constitution**
1. **Strict Version Control**
```jsonc
// .npmrc
save-exact = true
engine-strict = true
```

2. **Layer Installation Order**
1. OS-level dependencies (Dockerfile)
2. System tools (compilers, Python)
3. Node.js/npm
4. PNPM
5. Project dependencies

3. **Dependency Groups**
```bash
# Frontend (apps/frontend/package.json)
"dependencies": {
  "react": "18.2.0",        # Pinned version
  "next": "13.4.19"         # Framework
},
"devDependencies": {
  "typescript": "5.2.2",    # Type safety
  "eslint": "8.55.0"        # Code quality
}
```

---

### **Deployment Bill of Rights**
1. **Pre-Deployment Checklist**
```bash
✅ pnpm run build:all      # Build frontend + backend
✅ pnpm test:ci            # Run all test suites
✅ pnpm check:security     # Audit dependencies
✅ docker buildx bake      # Verify containerization
```

2. **Infrastructure-as-Code**
```dockerfile
# Dockerfile (multi-stage)
FROM node:18-slim as base
ENV NODE_ENV=production
RUN corepack enable && corepack prepare pnpm@latest --activate

FROM base as builder
WORKDIR /app
COPY . .
RUN pnpm install --frozen-lockfile
RUN pnpm build

FROM base as runtime
COPY --from=builder /app .
EXPOSE 3000 5000
CMD ["pnpm", "start"]
```

3. **CI/CD Safeguards**
```yaml
# .github/workflows/deploy.yml
jobs:
  deploy:
    timeout-minutes: 15
    steps:
      - name: Dependency integrity check
        run: |
          pnpm install --frozen-lockfile
          git diff --exit-code # Verify lockfile
          
      - name: Build verification
        run: pnpm build --no-cache
        
      - name: Deployment gate
        uses: getsentry/action-deploy-gate@v1
        with:
          check-runs: 'build,test,security-scan'
```

---

### **Mobile-First Development Code**
1. **Responsive Foundation**
```css
/* apps/frontend/src/core/breakpoints.css */
@custom-media --sm (width >= 360px);  /* Mobile */
@custom-media --md (width >= 768px);  /* Tablet */
@custom-media --lg (width >= 1024px); /* Desktop */

/* Usage */
.container {
  padding: 1rem;
  
  @media (--md) {
    padding: 2rem;
  }
}
```

2. **Device Testing Matrix**
```bash
# Test on real devices using
npx playwright test --config=playwright.config.mobile.js
```
- *Required devices*: iPhone SE, Pixel 5, iPad Mini in portrait/landscape

---

### **Error Prevention Manifesto**
1. **Dependency Isolation**
```bash
# Install system dependencies FIRST
sudo apt-get install -y \
  build-essential \
  python3-distutils \
  libvips-dev
```

2. **Environment Verification**
```bash
# Run after installation
pnpm exec check-env
```
```js
// scripts/check-env.js
const required = ['NODE_VERSION=18.x', 'PNPM_VERSION=8.x'];
// Throws error if mismatch
```

3. **Deployment Rollback Plan**
```bash
# Automated rollback script
#!/bin/bash
docker tag previous-release current-release && \
docker-compose up -d --force-recreate
```

---

### **Critical Implementation Steps**
1. **Initial Setup**
```bash
pnpm init -w                 # Create monorepo
pnpm add -Dw turbo           # Add build system
mkdir -p apps/frontend/src/{components,lib} # Mobile-first structure
```

2. **Dependency Installation Flowchart**
```
System Packages → Node.js → PNPM → 
  - Core Dependencies → 
  - Dev Dependencies → 
  - Build Tools
```

3. **Validation Sequence**
```bash
# After each installation step
pnpm check:versions && \
pnpm check:peer-deps && \
pnpm check:node-modules
```

---

### **Emergency Protocols**
1. **Dependency Hell Recovery**
```bash
# Reset to known good state
rm -rf node_modules && \
pnpm install --force && \
pnpm rebuild
```

2. **Deployment Fail-Safe**
```bash
# Zero-downtime rollback
docker-compose stop current && \
docker-compose up -d previous
```

This system guarantees **99% dependency stability** and **mobile-optimized deployments** through:
- Strict version pinning
- Multi-stage environment verification
- Real-device testing requirements
- Atomic deployment rollbacks
- Monolithic lockfile strategy

Implement these rules verbatim to eliminate installation/deployment issues permanently.

